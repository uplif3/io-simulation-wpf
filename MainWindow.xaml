<Window x:Class="io_simulation_wpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:io_simulation_wpf"
        xmlns:views="clr-namespace:io_simulation_wpf.Views"
        xmlns:converters="clr-namespace:io_simulation_wpf.Converters"
        xmlns:vm="clr-namespace:io_simulation_wpf.ViewModels"
        mc:Ignorable="d"
        Title="MainWindow" Height="600" Width="900">

    <Window.Resources>
        <!-- Converter, der null in Collapsed und einen Wert in Visible umwandelt -->
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

        <!-- DataTemplate für AlarmclockViewModel -->
        <DataTemplate DataType="{x:Type vm:AlarmclockViewModel}">
            <views:AlarmclockView/>
        </DataTemplate>

        <!-- DataTemplate für SeesawViewModel -->
        <DataTemplate DataType="{x:Type vm:SeesawViewModel}">
            <views:SeesawView/>
        </DataTemplate>
    </Window.Resources>

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Verbindung">
                <!-- Hier kommt das Sub-Menü mit den dynamischen Ports -->
                <MenuItem Header="COM Port auswählen"
                          ItemsSource="{Binding AvailablePorts}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <!-- Der Portname (string) selbst ist hier das DataContext-Objekt.
                                 Deshalb wird Header direkt an diesen String gebunden. -->
                            <Setter Property="Header" Value="{Binding}" />

                            <!-- Wir übergeben denselben Wert (string) als CommandParameter -->
                            <Setter Property="CommandParameter" Value="{Binding}" />

                            <!-- Wir binden den Command an SelectPortCommand des MainViewModels.
                                 Da die Items den Portnamen als DataContext haben, brauchen wir
                                 eine RelativeSource, die zum übergeordneten Menü hochgeht. -->
                            <Setter Property="Command" 
                                    Value="{Binding DataContext.SelectPortCommand,
                                            RelativeSource={RelativeSource AncestorType=MenuItem, AncestorLevel=1}}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="Trennen" Command="{Binding DisconnectCommand}" />
            </MenuItem>
        </Menu>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- IOView: Die Grid.Row wird über eine Bindung an IOViewRow (aus MainViewModel) gesetzt -->
            <views:IOView DataContext="{Binding IOVM}" 
                          Grid.Row="{Binding DataContext.IOViewRow, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
                          x:Name="IOPanel"/>

            <views:LogView DataContext="{Binding LogVM}" 
                           Grid.Row="0" Grid.Column="1" 
                           MinHeight="180" MaxHeight="180" MinWidth="200" 
                           x:Name="LogPanel"/>
            <views:DebugView DataContext="{Binding DebugVM}" 
                             Grid.Row="1" Grid.Column="1" 
                             MinHeight="180" MaxHeight="180" MinWidth="200" 
                             x:Name="DebugPanel"/>

            <!-- ContentControl für den Special Screen (Alarmclock oder Seesaw) -->
            <ContentControl Content="{Binding ActiveSpecialView}" 
                            Grid.Row="0" Grid.Column="0" 
                            Visibility="{Binding ActiveSpecialView, Converter={StaticResource NullToVisibilityConverter}}"/>
        </Grid>
    </DockPanel>
    
</Window>
